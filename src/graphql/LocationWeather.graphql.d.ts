/* 8d3c3a6d89d34b55914cb66ca240e0312c43717c
 * This file is automatically generated by graphql-let. */

export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** The `Upload` scalar type represents a file upload. */
    Upload: any;
};
export declare enum CacheControlScope {
    Public = "PUBLIC",
    Private = "PRIVATE"
}
export declare type City = {
    __typename?: 'City';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    country?: Maybe<Scalars['String']>;
    coord?: Maybe<Coordinates>;
    weather?: Maybe<Weather>;
};
export declare type Clouds = {
    __typename?: 'Clouds';
    all?: Maybe<Scalars['Int']>;
    visibility?: Maybe<Scalars['Int']>;
    humidity?: Maybe<Scalars['Int']>;
};
export declare type ConfigInput = {
    units?: Maybe<Unit>;
    lang?: Maybe<Language>;
};
export declare type Coordinates = {
    __typename?: 'Coordinates';
    lon?: Maybe<Scalars['Float']>;
    lat?: Maybe<Scalars['Float']>;
};
export declare enum Language {
    Af = "af",
    Al = "al",
    Ar = "ar",
    Az = "az",
    Bg = "bg",
    Ca = "ca",
    Cz = "cz",
    Da = "da",
    De = "de",
    El = "el",
    En = "en",
    Eu = "eu",
    Fa = "fa",
    Fi = "fi",
    Fr = "fr",
    Gl = "gl",
    He = "he",
    Hi = "hi",
    Hr = "hr",
    Hu = "hu",
    Id = "id",
    It = "it",
    Ja = "ja",
    Kr = "kr",
    La = "la",
    Lt = "lt",
    Mk = "mk",
    No = "no",
    Nl = "nl",
    Pl = "pl",
    Pt = "pt",
    PtBr = "pt_br",
    Ro = "ro",
    Ru = "ru",
    Sv = "sv",
    Se = "se",
    Sk = "sk",
    Sl = "sl",
    Sp = "sp",
    Es = "es",
    Sr = "sr",
    Th = "th",
    Tr = "tr",
    Ua = "ua",
    Uk = "uk",
    Vi = "vi",
    ZhCn = "zh_cn",
    ZhTw = "zh_tw",
    Zu = "zu"
}
export declare type Query = {
    __typename?: 'Query';
    getCityByName?: Maybe<City>;
    getCityById?: Maybe<Array<Maybe<City>>>;
};
export declare type QueryGetCityByNameArgs = {
    name: Scalars['String'];
    country?: Maybe<Scalars['String']>;
    config?: Maybe<ConfigInput>;
};
export declare type QueryGetCityByIdArgs = {
    id?: Maybe<Array<Scalars['String']>>;
    config?: Maybe<ConfigInput>;
};
export declare type Summary = {
    __typename?: 'Summary';
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    icon?: Maybe<Scalars['String']>;
};
export declare type Temperature = {
    __typename?: 'Temperature';
    actual?: Maybe<Scalars['Float']>;
    feelsLike?: Maybe<Scalars['Float']>;
    min?: Maybe<Scalars['Float']>;
    max?: Maybe<Scalars['Float']>;
};
export declare enum Unit {
    Metric = "metric",
    Imperial = "imperial",
    Kelvin = "kelvin"
}
export declare type Weather = {
    __typename?: 'Weather';
    summary?: Maybe<Summary>;
    temperature?: Maybe<Temperature>;
    wind?: Maybe<Wind>;
    clouds?: Maybe<Clouds>;
    timestamp?: Maybe<Scalars['Int']>;
};
export declare type Wind = {
    __typename?: 'Wind';
    speed?: Maybe<Scalars['Float']>;
    deg?: Maybe<Scalars['Int']>;
};
export declare type LocationWeatherFragment = ({
    __typename?: 'City';
} & Pick<City, 'id' | 'name' | 'country'> & {
    weather?: Maybe<({
        __typename?: 'Weather';
    } & {
        summary?: Maybe<({
            __typename?: 'Summary';
        } & Pick<Summary, 'title' | 'description' | 'icon'>)>;
        temperature?: Maybe<({
            __typename?: 'Temperature';
        } & Pick<Temperature, 'actual' | 'feelsLike' | 'min' | 'max'>)>;
        wind?: Maybe<({
            __typename?: 'Wind';
        } & Pick<Wind, 'speed' | 'deg'>)>;
        clouds?: Maybe<({
            __typename?: 'Clouds';
        } & Pick<Clouds, 'all' | 'visibility' | 'humidity'>)>;
    })>;
});
export declare const LocationWeatherFragmentDoc: import("@apollo/client").DocumentNode;
